use colored::Colorize;
use serde::Deserialize;

use std::{collections::HashSet, str};

use crate::configuration;

pub struct Generator {
    pub cube_count: usize,
    pub metadata: Option<Metadata>,
}

#[derive(Debug, Deserialize)]
pub struct Metadata {
    pub cubes: Vec<Cube>,
}

#[derive(Debug, Deserialize)]
pub struct Cube {
    pub name: String,
    pub dimensions: Option<Vec<FieldSet>>,
    pub measures: Option<Vec<FieldSet>>,
}

#[derive(Debug, Deserialize)]
pub struct Meta {
    pub extractable: Option<bool>,
}

#[derive(Debug, Deserialize)]
pub struct FieldSet {
    pub name: String,
    pub meta: Option<Meta>,
}

impl Generator {
    pub fn fetch_metadata(&mut self, cube_url: String) {
        let resp = match fetch_cube_metadata(&cube_url) {
            Ok(resp) => resp,
            Err(err) => {
                eprintln!("{} {}", "Error fetching cube metadata: ".red(), err);
                std::process::exit(0);
            }
        };

        self.cube_count = resp.cubes.len();
        self.metadata = Some(resp);
    }

    pub fn generate(&self, output_dir: String, file_name: String, _skip_errors: bool) {
        let config = match configuration::read() {
            Ok(c) => c,
            Err(e) => {
                eprintln!("Error: {}", e);
                return;
            }
        };

        let mut output: String = "".to_string();
        let mut all_dimension_types: Vec<String> = Vec::new();
        let mut all_measure_types: Vec<String> = Vec::new();

        let file_header =
            "// !! This file is generated by Cube Type Extractor RS - do not modify !!";
        let _ = output.push_str(&format!("{}\n", file_header));

        let metadata = match &self.metadata {
            Some(m) => m,
            None => {
                eprintln!("{}", "Error: Metadata is missing".red());
                return;
            }
        };

        for cube in &metadata.cubes {
            // skip a cube that contains the word Error
            if cube.name.contains("Error") {
                continue;
            }

            if let Some(union) = process_cube(cube) {
                let mut cube_name = "";

                for prefix in &config.prefixes {
                    if prefix.name == cube.name {
                        cube_name = &prefix.prefix;
                    }
                }

                let cube_union_ts_dimension_type =
                    format!("export type {}Dimensions = {}", cube_name, union.dimensions);

                let cube_union_ts_measure_type =
                    format!("export type {}Measures = {}", cube_name, union.measures);

                let _ = output.push_str(&format!("{}\n", cube_union_ts_dimension_type));
                let _ = output.push_str(&format!("{}\n", cube_union_ts_measure_type));

                all_dimension_types.extend(union.dimensions.split(" | ").map(String::from));
                all_measure_types.extend(union.measures.split(" | ").map(String::from));
            } else {
                // handle the case where the union is empty though this shouldnt really happen
            }
        }

        let cube_all_dimensions_ts_type = format!(
            "export type AllDimensions = {}",
            join_union_fields(all_dimension_types)
        );
        let cube_all_measures_ts_type = format!(
            "export type AllMeasures = {}",
            join_union_fields(all_measure_types)
        );

        let _ = output.push_str(&format!(
            "// !! All dimensions and measures for all cubes !!\n"
        ));

        let _ = output.push_str(&format!("{}\n", cube_all_dimensions_ts_type));
        let _ = output.push_str(&format!("{}\n", cube_all_measures_ts_type));

        let _ = write_to_file(&output_dir, &file_name, &output);

        println!("{}", "Complete".green())
    }
}

fn write_to_file(output_dir: &str, file_name: &str, output: &str) -> std::io::Result<()> {
    let file_path = format!("{}{}.ts", output_dir, file_name);
    let mut file = std::fs::File::create(&file_path)?;

    std::io::Write::write_all(&mut file, output.as_bytes())?;

    Ok(())
}

#[derive(Debug)]
struct CubeUnion {
    dimensions: String,
    measures: String,
}

fn process_cube(cube: &Cube) -> Option<CubeUnion> {
    let dimensions = match &cube.dimensions {
        Some(d) => d,
        None => {
            eprintln!("{}", "Error: No dimensions are defined".red());
            return None;
        }
    };

    let measures = match &cube.measures {
        Some(m) => m,
        None => {
            eprintln!("{}", "Error: No measures are defined".red());
            return None;
        }
    };

    let dimension_union = extract_to_union(dimensions);
    let measure_union = extract_to_union(measures);

    Some(CubeUnion {
        dimensions: dimension_union,
        measures: measure_union,
    })
}

fn extract_to_union(fields: &[FieldSet]) -> String {
    let mut items: Vec<String> = Vec::new();

    for field in fields {
        if let Some(true) = field.meta.as_ref().and_then(|meta| meta.extractable) {
            let field_name = extract_name(&field.name);
            let quoted_field_name = format!("'{}'", field_name);
            items.push(quoted_field_name);
        }
    }

    join_union_fields(items)
}

#[tokio::main]
async fn fetch_cube_metadata(cube_url: &str) -> Result<Metadata, Box<dyn std::error::Error>> {
    let client = reqwest::Client::new();
    let url = format!("{}/v1/meta", cube_url);

    let body = client
        .get(&url)
        .send()
        .await?
        .error_for_status()? // check for http errors
        .text()
        .await?;

    let metadata: Metadata = serde_json::from_str(&body).map_err(|e| {
        eprintln!("Error decoding response: {}", e);
        e
    })?;

    Ok(metadata)
}

fn extract_name(full_name: &str) -> String {
    full_name.split('.').last().unwrap().to_string()
}

fn join_union_fields(items: Vec<String>) -> String {
    let unique_items: HashSet<String> = items.into_iter().collect();
    unique_items.into_iter().collect::<Vec<_>>().join(" | ")
}
